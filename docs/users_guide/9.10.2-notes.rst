.. _release-9-10-1:

Version 9.10.2
==============
The significant changes to the various parts of the compiler are listed in the
following sections. See the `migration guide
<https://gitlab.haskell.org/ghc/ghc/-/wikis/migration/9.10>`_ on the GHC Wiki
for specific guidance on migrating programs to this release.

Language
~~~~~~~~



Compiler
~~~~~~~~

- Optimized lowering of BigNat# literals. (#23942, !12179)

- Fixed a bug where the jump shortcutting optimization could lead to unsoundness in pattern matching. (#24507)

- Look for haskell symbols only in relevant libraries. (#23415)

  When dynamically loading a Haskell symbol (typical when running a splice or
  GHCi expression), before this change we would search for the symbol in
  all dynamic libraries that were loaded. However, this could be very
  inefficient when too many packages are loaded (which can happen if there are
  many package dependencies) because the time to lookup the would be
  linear in the number of packages loaded.

  In one measurement, this improved performance for executing a GHCi expression
  from ~38 seconds down to ~2s.

- Fixed a bug that could cause a linker error when `TypeData` and `StrictData`
  where used in combination. (#24620)

JavaScript backend
~~~~~~~~~~~~~~~~~~



WebAssembly backend
~~~~~~~~~~~~~~~~~~~


GHCi
~~~~

- When using XDG directories ``.ghci_history`` now uses the ``$XDG_DATA_HOME`` variable as expected. (#24266)

- Replaced some uses of lists with Arrays for better performance during bytecode compilation.

Runtime system
~~~~~~~~~~~~~~

- Memory return logic now uses live bytes rather than live blocks to measure the size of the heap.
  This primarily affects the non-moving GC, which should now be more willing to return memory to the OS.
  Users who have fine-tuned the :rts-flag:`-F ⟨factor⟩`, :rts-flag:`-Fd ⟨factor⟩`, or :rts-flag:`-O ⟨size⟩` flags,
  and use the non-moving GC, should see if adjustments are needed in light of this change.

- Reduce fragmentation incurred by the nonmoving GC's segment allocator. In one application this reduced resident set size by 26%. See :ghc-ticket:`24150`.


``base`` library
~~~~~~~~~~~~~~~~




``ghc-prim`` library
~~~~~~~~~~~~~~~~~~~~


``ghc`` library
~~~~~~~~~~~~~~~

- Added some utility functions to `GHC.Data.SmallArray`

``ghc-heap`` library
~~~~~~~~~~~~~~~~~~~~

``ghc-experimental`` library
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


``template-haskell`` library
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Included libraries
~~~~~~~~~~~~~~~~~~

The package database provided with this distribution also contains a number of
packages other than GHC itself. See the changelogs provided with these packages
for further change information.
